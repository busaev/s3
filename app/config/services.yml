# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:
#    parameter_name: value

services:
#    service_name:
#        class: AppBundle\Directory\ClassName
#        arguments: ["@another_service_name", "plain_value", "%parameter_name%"]


    #############################################
    ################### TWIG ####################
    #############################################

    app.image_type_extension:
        class: AppBundle\Form\Extension\ImageTypeExtension
        tags:
            - { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\FileType }

    #############################################
    #####№№№##### Подписчики ####################
    #############################################
    logger.entity:
        class: AppBundle\EventListener\EntityLogger
        arguments: ["@service_container"]
        tags:
            - { name: doctrine.event_subscriber, connection: default }
            
    subscriber.router:
        class: AppBundle\EventListener\Router
        arguments: ["@service_container"]
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    #############################################
    ########## Службы ядра ######################
    #############################################
    
    # Custom route loader
    app.routing_loader:
        class: AppBundle\Routing\ExtraLoader
        arguments: ["@service_container"]
        tags:
            - { name: routing.loader }

    # Помошник для шаблонов
    app.tpl:
        class: AppBundle\Services\Tpl
        arguments: ["@service_container"]
         
    # Twig extensions
    app.twig_extension:
        class: AppBundle\Twig\AppExtension
        public: false
        tags:
            - { name: twig.extension }

    app.route:
        class: AppBundle\Services\Route
        arguments: ['@service_container']
            
    history:
        class: AppBundle\Services\History
        arguments: ["@doctrine.orm.entity_manager", "@security.token_storage", "@translator"]

    annotations:
        class: AppBundle\Services\Annotations
        arguments: ['@service_container']

    utils:
        class: AppBundle\Services\Utils
        arguments: ['@service_container']

    
    #############################################
    ######## Службы авторизации #################
    #############################################
    
    form_authenticator:
        class: AppBundle\Security\FormAuthenticator
        arguments: ["@router", "@doctrine.orm.entity_manager", "@security.password_encoder", "@translator"]

    memory_authenticator:
        class: AppBundle\Security\MemoryAuthenticator
        arguments: ["@router"]

    token_authenticator:
        class: AppBundle\Security\TokenAuthenticator
        arguments: ["@doctrine.orm.entity_manager"]
        
    hwi_oauth.user.provider.entity:
        class: AppBundle\Provider\Provider
        arguments: ["@session", "@doctrine", "@admin.checker", "@request_stack"]
        
    admin.checker:
        class: AppBundle\Provider\AdminChecker
        arguments: ["@doctrine", "%admins%"]
        
    #############################################
    ######## Службы сущностей ###################
    #############################################
    
    # коллекция служб отмеченных тегом - app.content
    app.entities:
        class: AppBundle\Services\Entities
        arguments: [ "@service_container" ]
        

    ###
    ###  [[ Core ]]
    ###
    
    # заглушка. служба модуля, будет добавлена в коллекцию службы app.entities
    dummy.entity:
        class: AppBundle\Services\Entities\Core\Dummy
        arguments: [ "@service_container" ]
        tags:
            -  { name: app.entity }
            
    # заглушка. служба модуля, будет добавлена в коллекцию службы app.entities
    history.entity:
        class: AppBundle\Services\Entities\Core\History
        arguments: [ "@service_container" ]
        tags:
            -  { name: app.entity }
    
    # элемент навигации. служба модуля, будет добавлена в коллекцию службы app.entities
    navigation_item.entity:
        class: AppBundle\Services\Entities\Core\NavigationItem
        arguments: [ "@service_container" ]
        tags:
            -  { name: app.entity }
    
    ###
    ###  [[ Content ]]
    ###
    
    # новости. служба модуля, будет добавлена в коллекцию службы app.entities
    page.entity:
        class: AppBundle\Services\Entities\Content\Page
        arguments: [ "@service_container" ]
        tags:
            -  { name: app.entity }
            
    # новости. служба модуля, будет добавлена в коллекцию службы app.entities
    news.entity:
        class: AppBundle\Services\Entities\Content\News
        arguments: [ "@service_container" ]
        tags:
            -  { name: app.entity }
            
    # страницы модуля. служба модуля, будет добавлена в коллекцию службы app.entities
    content_page.entity:
        class: AppBundle\Services\Entities\Content\ContentPage
        arguments: [ "@service_container" ]
        tags:
            -  { name: app.entity }
    
    ###
    ###  [[ Shop ]]
    ###
    
    # бренды. служба модуля, будет добавлена в коллекцию службы app.entities
    brend.entity:
        class: AppBundle\Services\Entities\Shop\Brend
        arguments: [ "@service_container" ]
        tags:
            -  { name: app.entity }
            
    # category. служба модуля, будет добавлена в коллекцию службы app.entities
    category.entity:
        class: AppBundle\Services\Entities\Shop\Category
        arguments: [ "@service_container" ]
        tags:
            -  { name: app.entity }
            
                # category. служба модуля, будет добавлена в коллекцию службы app.entities
    goods.entity:
        class: AppBundle\Services\Entities\Shop\Goods
        arguments: [ "@service_container" ]
        tags:
            -  { name: app.entity }